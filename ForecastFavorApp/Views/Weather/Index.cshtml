@model ForecastFavorLib.Models.CurrentWeatherResponse

@{
    ViewData["Title"] = "Current Weather";
}

<div class="container mt-5">
    <!-- Speech Recognition -->
    <div class="speech-recognition mt-3">
        <p>Ask for weather in a city:</p>
        <input type="text" id="speechInput" class="form-control" placeholder="Enter a city name" />
        <button id="startRecognition" class="btn btn-primary mt-2">Start Speech Recognition</button>
    </div>



    <!-- Current Location -->
    <div class="current-location">
        <p>Current Location: @Model.Location.Name, @Model.Location.Country</p>
        <!-- Button to trigger text-to-speech -->
        <button id="readWeatherButton" class="btn btn-info btn-lg mt-3">Read Weather Aloud</button>
    </div>

    <!-- Current Weather Card -->
    <div class="card border-primary mb-3 current-weather">
        <div class="card-body text-center">
            <!-- Display city and country in the card title -->
            <h3 class="card-title mb-4">@Model.Location.Name, @Model.Location.Country</h3>
            <!-- Weather Details on Left -->
            <div class="weather-details-left">
                <p class="card-text"><strong>Temperature:</strong> <i class="fas fa-temperature-low"></i> @Model.Current.TemperatureC °C (@Model.Current.TemperatureF °F)</p>
                <p class="card-text"><strong>Condition:</strong> <i class="fa fa-cloud"></i> @(Model.Current.Condition?.Text ?? "Not available")</p>
                <p class="card-text"><strong>Pressure:</strong> @Model.Current.PressureIn inches</p>
                <p class="card-text"><strong>Humidity:</strong> <i class="fa fa-droplet"></i> @Model.Current.Humidity %</p>
            </div>
            <!-- Weather Details on Right -->
            <div class="weather-details-right">
                <p class="card-text"><strong>Cloud Cover:</strong> <i class="fa fa-cloud"></i> @Model.Current.Cloud %</p>
                <p class="card-text"><strong>Feels Like:</strong>@Model.Current.FeelsLikeC °C</p>
                <p class="card-text"><strong>Wind Speed: </strong> <i class="fa fa-wind"></i> @Model.Current.WindKph kph</p>
            </div>
        </div>
    </div>
</div>


<script>
    // Declare a variable to hold the speech recognition object
    let recognition;
    
    // Get references to HTML elements by their IDs
    const speechInput = document.getElementById("speechInput");
    const startRecognition = document.getElementById("startRecognition");

    // Add a click event listener to the "Start Recognition" button
    startRecognition.addEventListener("click", () => {
        // Check if the recognition object is not already initialized
        if (!recognition) {
            // Create a new webkitSpeechRecognition object
            recognition = new webkitSpeechRecognition();

            // Define a callback function to handle recognition results
            recognition.onresult = (event) => {
                // Get the recognized speech result
                const result = event.results[0][0].transcript;
                
                // Set the recognized result as the value of the input field
                speechInput.value = result;
                
                // Call a function to fetch current weather for the recognized city
                fetchCurrentWeather(result);
            };
        }

        // Start the speech recognition
        recognition.start();
    });

    // Add a click event listener to the "Read Weather" button
    document.getElementById("readWeatherButton").addEventListener("click", function () {
        // Extract model data into JavaScript variables (assumes this is Razor syntax)
        var temperatureC = '@Model.Current.TemperatureC';
        var conditionText = '@(Model.Current.Condition?.Text ?? "not available")';

        // Construct the weather text to be read
        var weatherText = `Current temperature is ${temperatureC} degrees Celsius. 
                        The weather condition is ${conditionText}.`;

        // Call the speak function to read the weather text aloud
        speak(weatherText);
    });

    // Function to fetch current weather for a given city
    function fetchCurrentWeather(city) {
        // Redirect to the Weather/Index action with the user's input as a query parameter
        window.location.href = `/Weather/Index?city=${city}`;
    }

    // Function to speak the provided text
    function speak(text) {
        // Create a SpeechSynthesisUtterance object
        const speech = new SpeechSynthesisUtterance();
        
        // Set the text to be spoken
        speech.text = text;
        
        // Set the language for speech synthesis (English - US)
        speech.lang = 'en-US'; 
        
        // Set the pitch and rate of speech
        speech.pitch = 1;
        speech.rate = 1;
        
        // Start the speech synthesis
        window.speechSynthesis.speak(speech);
    }
</script>
