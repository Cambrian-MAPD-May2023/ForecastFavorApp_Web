@* Specify the model type this view *@
@model ForecastFavorLib.Models.ForecastDay

@{
    // Set the page title to be used in the layout for the <title> tag
    ViewData["Title"] = "Weather Forecast for Tomorrow";
}
@*Heading for the forecast of the next day*@
<h2>Weather Forecast for Tomorrow</h2>


<!-- Speech Recognition for City Input -->
<div class="speech-recognition mt-3">
    <p>Ask for the forecast in a city:</p>
    <input type="text" id="speechCityInput" class="form-control" placeholder="Enter a city name" />
    <button id="startCityRecognition" class="btn btn-primary mt-2">Start Speech Recognition</button>
</div>


@*Check if the Model and the Day properties are not null to avoid null reference exceptions*@
@if (Model != null && Model.Day != null)
{
    // Begin a division to display the weather details
    <div class="card border-primary mb-3">
        <div class="card-body text-center">
            <p><strong>Max Temperature:</strong> <i class="fa fa-temperature-empty"></i> @Model.Day.MaxTempC °C</p>
            <p><strong>Min Temperature:</strong> <i class="fa fa-cloud"></i> @Model.Day.MinTempC °C</p>
            <p><strong>Average Temperature:</strong> @Model.Day.AvgTempC °C</p>
            <p><strong>Condition:</strong> @Model.Day.Condition.Text</p>
            <p><strong>Max Wind Speed:</strong> @Model.Day.MaxWindKph kph</p>
            <p><strong>Total Precipitation:</strong> @Model.Day.TotalPrecipIn inches</p>
            <p><strong>Total Snow:</strong> @Model.Day.TotalSnowCm cm</p>
            <p><strong>Average Humidity:</strong> @Model.Day.AvgHumidity %</p>
            <p><strong>Chance of Rain:</strong> @Model.Day.DailyChanceOfRain %</p>
            <p><strong>Chance of Snow:</strong> @Model.Day.DailyChanceOfSnow %</p>
            <button id="readTomorrowForecastButton" class="btn btn-info btn-lg mt-3">Read Forecast Aloud</button>
        </div>
    </div>

}
else
{
// Display a message if the forecast data for tomorrow is unavailable
<p>Forecast data for tomorrow is not available at the moment.</p>
}

<script>
    // Declare a variable to hold the speech recognition object
    let recognitionCity;
    
    // Get references to HTML elements by their IDs
    const speechCityInput = document.getElementById("speechCityInput");
    const startCityRecognition = document.getElementById("startCityRecognition");

    // Add a click event listener to the "Start Recognition" button
    startCityRecognition.addEventListener("click", () => {
        // Check if the recognitionCity object is not already initialized
        if (!recognitionCity) {
            // Create a new webkitSpeechRecognition object
            recognitionCity = new webkitSpeechRecognition();

            // Define a callback function to handle recognition results
            recognitionCity.onresult = (event) => {
                // Get the recognized speech result
                const result = event.results[0][0].transcript;
                
                // Set the recognized result as the value of the input field
                speechCityInput.value = result;
                
                // Call a function to fetch the forecast for the recognized city
                fetchTomorrowForecast(result);
            };
        }

        // Start the speech recognition
        recognitionCity.start();
    });

    // Add a click event listener to the "Read Tomorrow's Forecast" button
    document.getElementById("readTomorrowForecastButton").addEventListener("click", function () {
        // Extract model data into JavaScript variables (assumes this is Razor syntax)
        var maxTempC = '@Model.Day.MaxTempC';
        var conditionText = '@Model.Day.Condition.Text';

        // Construct the forecast text to be read
        var forecastText = `The maximum temperature tomorrow will be ${maxTempC} degrees Celsius. 
                            The condition is expected to be ${conditionText}.`;

        // Call the speak function to read the forecast text aloud
        speak(forecastText);
    });

    // Function to speak the provided text
    function speak(text) {
        // Create a SpeechSynthesisUtterance object
        const speech = new SpeechSynthesisUtterance();
        
        // Set the text to be spoken
        speech.text = text;
        
        // Set the language for speech synthesis (English - US)
        speech.lang = 'en-US'; 
        
        // Set the pitch and rate of speech
        speech.pitch = 1;
        speech.rate = 1;
        
        // Start the speech synthesis
        window.speechSynthesis.speak(speech);
    }

    // Function to fetch the forecast for tomorrow based on the recognized city
    function fetchTomorrowForecast(city) {
        // Redirect the user to a URL that fetches the forecast for the specified city
        window.location.href = `/Weather/Tomorrow?city=${city}`;
    }
</script>
